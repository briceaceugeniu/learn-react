[{"C:\\Users\\eugen\\PhpstormProjects\\react-demos\\demos\\widgets\\src\\index.js":"1","C:\\Users\\eugen\\PhpstormProjects\\react-demos\\demos\\widgets\\src\\App.js":"2","C:\\Users\\eugen\\PhpstormProjects\\react-demos\\demos\\widgets\\src\\components\\Accordion.js":"3","C:\\Users\\eugen\\PhpstormProjects\\react-demos\\demos\\widgets\\src\\components\\Search.js":"4","C:\\Users\\eugen\\PhpstormProjects\\react-demos\\demos\\widgets\\src\\components\\Dropdown.js":"5"},{"size":197,"mtime":1610958041485,"results":"6","hashOfConfig":"7"},{"size":1270,"mtime":1611069323873,"results":"8","hashOfConfig":"7"},{"size":894,"mtime":1610963721270,"results":"9","hashOfConfig":"7"},{"size":1868,"mtime":1610980571917,"results":"10","hashOfConfig":"7"},{"size":1359,"mtime":1611068579492,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9f1on3",{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"C:\\Users\\eugen\\PhpstormProjects\\react-demos\\demos\\widgets\\src\\index.js",[],"C:\\Users\\eugen\\PhpstormProjects\\react-demos\\demos\\widgets\\src\\App.js",["24","25"],"C:\\Users\\eugen\\PhpstormProjects\\react-demos\\demos\\widgets\\src\\components\\Accordion.js",[],"C:\\Users\\eugen\\PhpstormProjects\\react-demos\\demos\\widgets\\src\\components\\Search.js",[],"C:\\Users\\eugen\\PhpstormProjects\\react-demos\\demos\\widgets\\src\\components\\Dropdown.js",["26"],"import React, { useState, useEffect, useRef } from \"react\";\n\nconst Dropdown = ({ options, about, selected, onSelectedChange }) => {\n  const [open, setOpen] = useState(false);\n  const ref = useRef();\n\n  useEffect(() => {\n    document.body.addEventListener(\n      \"click\",\n      (event) => {\n        if (ref.current && ref.current.contains(event.target)) {\n          return;\n        }\n\n        setOpen(false);\n      },\n      { capture: true }\n    );\n  }, []);\n\n  const renderOptions = options.map((option) => {\n    if (option !== selected) {\n      return (\n        <div\n          onClick={() => {\n            onSelectedChange(option);\n          }}\n          key={option.value}\n          className={`item`}\n        >\n          {option.label}\n        </div>\n      );\n    }\n  });\n\n  return (\n    <div ref={ref} className={`ui form`}>\n      <div className={`field`}>\n        <label className={`label`}>{`Select a ${about}`}</label>\n        <div\n          onClick={() => setOpen(!open)}\n          className={`ui selection dropdown ${open ? \"visible active\" : \"\"} `}\n        >\n          <i className={`dropdown icon`} />\n          <div className={`text`}>{selected.label}</div>\n          <div className={`menu ${open ? \"visible transition\" : \"\"}`}>\n            {renderOptions}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dropdown;\n",["27","28"],{"ruleId":"29","severity":1,"message":"30","line":6,"column":7,"nodeType":"31","messageId":"32","endLine":6,"endColumn":12},{"ruleId":"33","severity":1,"message":"34","line":43,"column":1,"nodeType":"35","endLine":64,"endColumn":3},{"ruleId":"36","severity":1,"message":"37","line":21,"column":46,"nodeType":"38","messageId":"39","endLine":21,"endColumn":48},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},"no-unused-vars","'items' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-global-assign","no-unsafe-negation"]