[{"C:\\Users\\eugen\\PhpstormProjects\\learn-react\\learn-react-u\\widgets\\src\\index.js":"1","C:\\Users\\eugen\\PhpstormProjects\\learn-react\\learn-react-u\\widgets\\src\\App.js":"2","C:\\Users\\eugen\\PhpstormProjects\\learn-react\\learn-react-u\\widgets\\src\\components\\Dropdown.js":"3","C:\\Users\\eugen\\PhpstormProjects\\learn-react\\learn-react-u\\widgets\\src\\components\\Translate.js":"4","C:\\Users\\eugen\\PhpstormProjects\\learn-react\\learn-react-u\\widgets\\src\\components\\Convert.js":"5"},{"size":207,"mtime":1610998758159,"results":"6","hashOfConfig":"7"},{"size":1164,"mtime":1611083058810,"results":"8","hashOfConfig":"7"},{"size":1359,"mtime":1611083491833,"results":"9","hashOfConfig":"7"},{"size":1046,"mtime":1611149406184,"results":"10","hashOfConfig":"7"},{"size":714,"mtime":1611175879976,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"133a110",{"filePath":"15","messages":"16","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\eugen\\PhpstormProjects\\learn-react\\learn-react-u\\widgets\\src\\index.js",[],["25","26"],"C:\\Users\\eugen\\PhpstormProjects\\learn-react\\learn-react-u\\widgets\\src\\App.js",["27","28","29","30","31"],"import React, { useState } from \"react\";\n// import Accordion from \"./components/Accordion\";\n// import Search from \"./components/Search\";\nimport Translate from \"./components/Translate\";\nimport Dropdown from \"./components/Dropdown\";\n\nconst items = [\n  {\n    id: 1,\n    title: \"Was ist React?\",\n    content: \"React ist eine beliebte JavaScript framework.\",\n  },\n  {\n    id: 2,\n    title: \"Wie verwendet man React?\",\n    content: \"Indem man erstellt React Components\",\n  },\n  {\n    id: 3,\n    title: \"Warum React\",\n    content: \"Weil es cool ist!\",\n  },\n];\n\nconst colorOptions = [\n  {\n    label: \"Red\",\n    value: \"red\",\n  },\n  {\n    label: \"Blue\",\n    value: \"blue\",\n  },\n  {\n    label: \"Yellow\",\n    value: \"yellow\",\n  },\n  {\n    label: \"Green\",\n    value: \"green\",\n  },\n];\n\nexport default () => {\n  const [selected, setSelected] = useState(colorOptions[0]);\n\n  return (\n    <div>\n      {/*<Accordion items={items} />*/}\n      {/*<Search />*/}\n      {/*<Dropdown*/}\n      {/*  about={`Color`}*/}\n      {/*  options={colorOptions}*/}\n      {/*  selected={selected}*/}\n      {/*  onSelectedChange={setSelected}*/}\n      {/*/>*/}\n      <Translate />\n    </div>\n  );\n};\n","C:\\Users\\eugen\\PhpstormProjects\\learn-react\\learn-react-u\\widgets\\src\\components\\Dropdown.js",["32"],"import React, { useState, useEffect, useRef } from \"react\";\n\nconst Dropdown = ({ options, about, selected, onSelectedChange }) => {\n  const [open, setOpen] = useState(false);\n  const ref = useRef();\n\n  useEffect(() => {\n    document.body.addEventListener(\n      \"click\",\n      (event) => {\n        if (ref.current && ref.current.contains(event.target)) {\n          return;\n        }\n\n        setOpen(false);\n      },\n      { capture: true }\n    );\n  }, []);\n\n  const renderOptions = options.map((option) => {\n    if (option !== selected) {\n      return (\n        <div\n          onClick={() => {\n            onSelectedChange(option);\n          }}\n          key={option.value}\n          className={`item`}\n        >\n          {option.label}\n        </div>\n      );\n    }\n  });\n\n  return (\n    <div ref={ref} className={`ui form`}>\n      <div className={`field`}>\n        <label className={`label`}>{`Select a ${about}`}</label>\n        <div\n          onClick={() => setOpen(!open)}\n          className={`ui selection dropdown ${open ? \"visible active\" : \"\"} `}\n        >\n          <i className={`dropdown icon`} />\n          <div className={`text`}>{selected.label}</div>\n          <div className={`menu ${open ? \"visible transition\" : \"\"}`}>\n            {renderOptions}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dropdown;\n","C:\\Users\\eugen\\PhpstormProjects\\learn-react\\learn-react-u\\widgets\\src\\components\\Translate.js",[],"C:\\Users\\eugen\\PhpstormProjects\\learn-react\\learn-react-u\\widgets\\src\\components\\Convert.js",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":5,"column":8,"nodeType":"39","messageId":"40","endLine":5,"endColumn":16},{"ruleId":"37","severity":1,"message":"41","line":7,"column":7,"nodeType":"39","messageId":"40","endLine":7,"endColumn":12},{"ruleId":"42","severity":1,"message":"43","line":44,"column":1,"nodeType":"44","endLine":60,"endColumn":3},{"ruleId":"37","severity":1,"message":"45","line":45,"column":10,"nodeType":"39","messageId":"40","endLine":45,"endColumn":18},{"ruleId":"37","severity":1,"message":"46","line":45,"column":20,"nodeType":"39","messageId":"40","endLine":45,"endColumn":31},{"ruleId":"47","severity":1,"message":"48","line":21,"column":46,"nodeType":"49","messageId":"50","endLine":21,"endColumn":48},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'Dropdown' is defined but never used.","Identifier","unusedVar","'items' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'selected' is assigned a value but never used.","'setSelected' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]